Домашнее задание HW02
• 1: переименовать MockUserRepositoryImpl в InMemoryUserRepositoryImpl и имплементировать по аналогии с InMemoryMealRepositoryImpl (список пользователей возвращать отсортированным по имени)
• 2: сделать Meal extends AbstractBaseEntity, MealWithExceed перенести в пакет ru.javawebinar.topjava.to (transfer objects)
• 3: Изменить MealRepository и InMemoryMealRepositoryImpl таким образом, чтобы вся еда всех пользователей находилась в одном общем хранилище, но при этом каждый конкретный авторизованный пользователь мог видеть и редактировать только свою еду.• 3.1: реализовать хранение еды для каждого пользователя можно с добавлением поля userId в Meal ИЛИ без него (как нравится). Напомню, что репозиторий один и приложение может работать одновременно с многими пользователями.
• 3.2: если по запрошенному id еда отсутствует или чужая, возвращать null/false (см. комментарии в UserRepository)
• 3.3: список еды возвращать отсортированный в обратном порядке по датам
• 3.4: атомарность операций не требуется  (коллизии при одновременном изменении одного пользователя можно не учитывать)

• 4: Реализовать слои приложения для функциональности "еда". API контроллера должна удовлетворять все потребности демо приложения и ничего лишнего (см. демо).• Смотрите на реализацию слоя для user и делаете по аналогии! Если там что-то непонятно, не надо исправлять или делать по своему. Задавайте вопросы. Если действительно нужна правка- я сделаю и напишу всем.
• 4.1: после авторизации (сделаем позднее), id авторизованного юзера можно получить из SecurityUtil.authUserId(). Запрос попадает в контроллер, методы которого будут доступны снаружи по http, т.е. запрос можно будет сделать с ЛЮБЫМ id для еды(не принадлежащем авторизированному пользователю). Нельзя позволять модифицировать/смотреть чужую еду.
• 4.2: SecurityUtil может использоваться только на слое web (см. реализацию ProfileRestController). MealService можно тестировать без подмены логики авторизации, принимаем в методах сервиса и репозитория параметр userId: id владельца еды.
• 4.3: если еда не принадлежит авторизированному пользователю или отсутствует, в MealServiceImpl бросать NotFoundException.
• 4.4: конвертацию в MealWithExceeded можно делать как в слое web, так и в service (Mapping Entity->DTO: Controller or Service?)
• 4.5: в MealServiceImpl постараться сделать в каждом методе только одни запрос к MealRepository
• 4.6 еще раз: не надо в названиях методов повторять названия класса (Meal).

• 5: включить классы еды в контекст Spring (добавить аннотации) и вызвать из SpringMain любой метод MealRestController (проверить что Spring все корректно заинжектил)

Optional
• 6: в MealServlet сделать инициализацию Spring, достать MealRestController из контекста и работать с едой через него (как в SpringMain). pom.xml НЕ менять, работаем со spring-context. Сервлет обращается к контролеру, контроллер вызывает сервис, сервис - репозиторий.• 6.1: учесть, что когда будем работать через Spring MVC, MealServlet удалим, те вся логика должна быть в контроллере

• 7: добавить в meals.jsp и MealServlet две отдельные фильтрации еды: по дате и по времени (см. демо)
• 8: добавить выбор текущего залогиненного пользователя (имитация авторизации, сделать Select с двумя элементами со значениями 1 и 2 в index.html и SecurityUtil.setAuthUserId(userId) в UserServlet).Настоящая атворизация будет через Spring Security позже.