1.1 По аналогии с UserServlet добавить MealServlet и meals.jsp
Задеплоить приложение (war) в Tomcat c applicationContext=topjava (приложение должно быть доступно по http://localhost:8080/topjava)
Попробовать разные деплои в Tomcat, remote и local debug
1.2 Сделать отображения списка еды в JSP, цвет записи в таблице зависит от параметра exceed (красный/зеленый).
1.2.1 Список еды захардкодить (те проинициализировать в коде, желательно чтобы в проекте инициализация была только в одном месте)
1.2.2 Время выводить без 'T'
1.2.3 Список выводим БЕЗ фильтрации по startTime/endTime
1.2.4 Вариант реализации:
из сервлета преобразуете еду в List<MealWithExceeded>;
кладете список в запрос (request.setAttribute);
делаете forward на jsp для отрисовки таблицы (при redirect атрибуты теряются).
в JSP для цикла можно использовать JSTL tag forEach. Для подключения JSTL в pom.xml и шапку JSP нужно добавить:
    <dependency>
       <groupId>javax.servlet</groupId>
       <artifactId>jstl</artifactId>
       <version>1.2</version>
    </dependency>

    <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

Optional
2. Реализуем в ПАМЯТИ CRUD (create/read/update/delete) для еды
Пример: Simple CRUD using Servlet/JSP

2.1 Хранение в памяти будет одна из наших CRUD реализаций (позже будет JDBC, JPA и DATA-JPA).
2.2 Работать с реализацией CRUD через интерфейс, который не должен ничего знать о деталях реализации (Map, DB или что-то еще).
2.3 Добавить поле id в Meal/ MealWithExceed и реализовать генерацию счетчика, УЧЕСТЬ МНОГОПОТОЧНОСТЬ СЕРВЛЕТОВ
обзор java.util.concurrent
2.4 Сделать форму редактирования в JSP: AJAX/JavaScript использовать НЕ надо, делаем через <form method="post"> и doPost() в сервлете.
2.5 Для ввода дат и времени можно использовать html5 типы, хотя они поддерживаются не всеми браузерами (протестировать свой браузер).
В конце курса мы добавим DateTimePicker jQuery plugin, который будет работать на всех браузерах.